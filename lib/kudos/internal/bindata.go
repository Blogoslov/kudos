// Code generated by go-bindata.
// sources:
// example/assignments/assignment.sample
// example/config
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleAssignmentsAssignmentSample = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\x3d\x4f\xc5\x20\x14\xdd\xfb\x2b\x6e\x98\x34\xe9\x00\xc4\x2e\xdd\x4c\x74\x71\x32\xd1\xcd\x98\x17\x0a\xa8\x24\x05\x9a\x02\x53\xd3\xff\xae\x2d\x8a\x90\xb6\xfa\xde\x5b\x5e\x7a\xcf\xbd\xe7\x23\x87\xa9\x02\x00\xc4\xad\x90\x08\x5a\x40\xcc\x39\xf5\x6e\x30\x41\xf5\x3a\xff\x60\x46\x28\xe3\x16\xe8\x65\x19\x7c\xfd\xa6\xef\xff\x05\x1e\x46\xdb\xf5\x52\x17\x78\x06\x11\xf4\x3b\x7b\xad\xb3\xbb\x24\xf7\xa6\x46\xe7\x51\x0e\x89\x10\x91\x87\xd0\xc3\x4d\x0d\x14\x93\x06\x98\x07\x42\x5b\x8c\x99\x86\xab\xfb\xa7\xe7\xeb\x1f\xda\xb9\xbe\xdc\x13\x3d\xf2\x94\x0b\x37\x47\xc2\xbb\x21\x9c\xe4\xd6\x88\x64\xaa\x4a\xcc\xe7\x85\x89\xab\x86\xe9\xb8\x7b\xbb\x36\xa0\xa5\xf1\x90\x6a\xd8\xcb\x94\x67\x4e\xc7\x8f\x71\x11\x48\xe1\x74\xb0\xca\xf8\xf5\xb8\xc1\xbb\x09\x62\x59\x39\x34\x86\x6e\x54\xfc\xc4\xad\x5e\x9c\x9c\xbc\xd4\x43\xcf\x7c\xdc\xbe\x93\x22\x70\xaf\xac\x71\xed\xdf\x4d\x9c\x23\x4b\x0b\x59\x17\xba\xe3\xfe\xa6\xe2\xab\x60\x62\x39\xcb\x46\x9e\x36\x05\x38\xd7\xff\xd0\xe6\x97\x5b\xde\x24\xda\xa1\x92\xf6\xe0\x61\x6d\xca\xa1\xe5\x53\xa9\xe6\xea\x33\x00\x00\xff\xff\x81\x25\x53\xed\x85\x03\x00\x00")

func exampleAssignmentsAssignmentSampleBytes() ([]byte, error) {
	return bindataRead(
		_exampleAssignmentsAssignmentSample,
		"example/assignments/assignment.sample",
	)
}

func exampleAssignmentsAssignmentSample() (*asset, error) {
	bytes, err := exampleAssignmentsAssignmentSampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example/assignments/assignment.sample", size: 901, mode: os.FileMode(420), modTime: time.Unix(1453319379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exampleConfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x4a\xce\x4f\x49\x55\x52\xb0\x02\x32\x8a\x0d\x0d\x0c\x95\x74\xc0\x82\x79\x89\xb9\x10\x41\xe7\x60\x05\x84\x68\x4a\x6a\x71\x72\x51\x66\x41\x49\x66\x7e\x1e\x92\xa4\x42\x66\xb1\x42\x62\x9e\x42\x66\x5e\x49\x51\x7e\x4a\x69\x72\x49\x7e\x51\xa5\x42\x72\x7e\x69\x51\x71\x2a\x50\x4c\xc1\x39\x58\x0f\xaa\xbb\x24\x31\x3e\xbd\x28\xbf\xb4\x00\x61\x59\x49\x62\xb1\x12\x57\x2d\x17\x20\x00\x00\xff\xff\x27\xe4\x1c\x02\x88\x00\x00\x00")

func exampleConfigBytes() ([]byte, error) {
	return bindataRead(
		_exampleConfig,
		"example/config",
	)
}

func exampleConfig() (*asset, error) {
	bytes, err := exampleConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example/config", size: 136, mode: os.FileMode(420), modTime: time.Unix(1452793913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example/assignments/assignment.sample": exampleAssignmentsAssignmentSample,
	"example/config":                        exampleConfig,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example": &bintree{nil, map[string]*bintree{
		"assignments": &bintree{nil, map[string]*bintree{
			"assignment.sample": &bintree{exampleAssignmentsAssignmentSample, map[string]*bintree{}},
		}},
		"config": &bintree{exampleConfig, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
